package module.jobBank.domain; 

valueType pt.utl.ist.fenix.tools.util.ByteArray as ByteArray {
    externalizeWith {
        bytearray getBytes();
    }
}

valueType java.math.BigDecimal as BigDecimal {
    externalizeWith {
        String toString();
    }
}

valueType pt.ist.jpdafinance.pt.EconomicActivityClassificationLeaf as EconomicActivityClassificationLeaf {
    externalizeWith {
        String exportAsString();
    }
    internalizeWith pt.ist.jpdafinance.pt.EconomicActivityClassificationGroup.importFromString();
}

enum module.jobBank.domain.JobOfferType as JobOfferType;
enum module.jobBank.domain.JobBankAccountabilityType as JobBankAccountabilityType;
enum module.jobBank.domain.FenixDegreeType as FenixDegreeType;
enum module.jobBank.domain.FenixCycleType as FenixCycleType;

class task.CreateBootstrapJobBankTask extends .pt.ist.bennu.core.domain.scheduler.Task {
}

class task.UpdateExpiredEnterpriseAgreementsTask extends .pt.ist.bennu.core.domain.scheduler.Task {
}

class task.CreateOrUpdateFenixDegreesTask extends .pt.ist.bennu.core.domain.scheduler.Task {
}

class task.UpdateStudents extends .pt.ist.bennu.core.domain.scheduler.Task {
}
						   
class task.ExpireEnterpriseTermsOfResponsibilityTask extends .pt.ist.bennu.core.domain.scheduler.Task {
}

class JobBankSystem { 
	String urlEmailValidation;
	String emailValidationFromName;
	String emailValidationFromEmail;
}

class CurriculumProcessFile extends .module.workflow.domain.ProcessFile {
}
class CoverLetterProcessFile extends .module.workflow.domain.ProcessFile {
}
class LetterRecomendationProcessFile extends .module.workflow.domain.ProcessFile {
}



class EnterpriseProcess extends .module.workflow.domain.WorkflowProcess {
}

class Enterprise{
	boolean canceled;
	boolean blocked;
	EconomicActivityClassificationLeaf designation;
	MultiLanguageString summary;
	String contactPerson;
	String nif;
	boolean confirmedEmail;
	ByteArray logo;
	boolean acceptedTermsOfResponsibilityForCurrentYear;
}

class JobBankYear {
	Integer year;
	Integer counter;
}

class JobOfferProcess extends .module.workflow.domain.WorkflowProcess {
}



class JobOffer {
	DateTime creationDate;
	LocalDate beginDate;
	LocalDate endDate;
	DateTime submittedForApprovalDate;
	DateTime approvalDate;
	Boolean canceled;
	Boolean conclued;
	String place;
	MultiLanguageString function;
	MultiLanguageString functionDescription;
	MultiLanguageString requirements;
	MultiLanguageString terms;
	JobOfferType jobOfferType;
	Integer vacancies;
}
	class JobOfferInternal extends JobOffer {
	
	}
	class JobOfferExternal extends JobOffer{
		String externalLink;
	}

class Student {
	DateTime acceptedTermsResponsibilityDate;
	Boolean hasPersonalDataAuthorization;
}

class JobOfferNotificationFilter {
	JobOfferType jobOfferType;
}

class StudentRegistration {
	Integer number;
	BigDecimal average;
	Boolean isConcluded;
	Integer curricularYear;
	String remoteRegistrationOid;
}

class StudentRegistrationCycleType {
	BigDecimal average;
	Boolean isConcluded;
	FenixCycleType cycleType;
}

class Curriculum {
	LocalDate dateOfBirth;
	String nationality;
	String address;
	String area;
	String areaCode;
	String districtSubdivision;
	String mobilePhone;
	String phone;
	String email;
	MultiLanguageString professionalStatus;
	MultiLanguageString geographicAvailability;
	
}
class curriculumQualification.CurriculumQualification{
	LocalDate beginDate;
	LocalDate endDate;
	MultiLanguageString institute;
	MultiLanguageString city;
}
	class curriculumQualification.ProfissionalExperience extends curriculumQualification.CurriculumQualification{
		MultiLanguageString businessArea;
		MultiLanguageString function;
		MultiLanguageString mainActivities;
	}
	class curriculumQualification.InternacionalExperience extends curriculumQualification.CurriculumQualification{
		MultiLanguageString country;
		MultiLanguageString program;
		MultiLanguageString mainActivities;
	}
	class curriculumQualification.Extracurricular extends curriculumQualification.CurriculumQualification{
	 	MultiLanguageString businessArea;
		MultiLanguageString function;
		MultiLanguageString mainActivities;
	}
	class curriculumQualification.Formation extends curriculumQualification.CurriculumQualification{
	 	MultiLanguageString formationArea;
		MultiLanguageString degree;
		MultiLanguageString acquiredSkills;
	}

class OfferCandidacy{
	DateTime creationDate;
	DateTime modifiedDate;
	boolean canceled;
}

class EmailValidation{
	DateTime expiredDate;
	String checksum;
	String email;
}

class FenixDegree {
	MultiLanguageString name;
	boolean active;
	FenixDegreeType degreeType;
	String remoteDegreeOid;
}

class groups.NpeGroup extends .pt.ist.bennu.core.domain.groups.PersistentGroup {
}

class groups.EnterpriseGroup extends .pt.ist.bennu.core.domain.groups.PersistentGroup {
}

class groups.EnterpriseActiveGroup extends .pt.ist.bennu.core.domain.groups.PersistentGroup {
}

class groups.EnterprisePendingAcceptanceTermsGroup extends .pt.ist.bennu.core.domain.groups.PersistentGroup {
}

class groups.StudentGroup extends .pt.ist.bennu.core.domain.groups.PersistentGroup {
}

class groups.StudentActiveGroup extends .pt.ist.bennu.core.domain.groups.PersistentGroup {
}

class groups.FenixStudentGroup extends .pt.ist.bennu.core.domain.groups.PersistentGroup {
}

class CurriculumProcess extends .module.workflow.domain.WorkflowProcess {
}

/*Relations With JobBankSystem */

relation JobBankSystemWithJobOfferNotificationFilter {
	JobBankSystem playsRole jobBankSystem;
	JobOfferNotificationFilter playsRole jobOfferNotificationFilters {
		multiplicity *;
	}
}

relation JobBankSystemWithMyOrg {
	JobBankSystem playsRole jobBankSystem;
	.pt.ist.bennu.core.domain.MyOrg playsRole myOrg;
}
relation JobBankSystemWithEnterprise {
	JobBankSystem playsRole jobBankSystem;
	Enterprise playsRole enterprises{
		multiplicity *;
	}
}
relation JobBankSystemWithFenixDegrees {
	JobBankSystem playsRole jobBankSystem;
	FenixDegree playsRole fenixDegree{
		multiplicity *;
	}
}
relation JobBankSystemWitJobOffer {
	JobBankSystem playsRole jobBankSystem;
	JobOffer playsRole JobOffers{
		multiplicity *;
	}
}
relation JobBankSystemWitOfferCandidacy {
	JobBankSystem playsRole jobBankSystem;
	OfferCandidacy playsRole offerCandidacies{
		multiplicity *;
	}
}


relation JobBankSystemWithStudent {
	JobBankSystem playsRole jobBankSystem;
	Student playsRole students{
		multiplicity *;
	}
}
relation JobBankSystemWithJobBankYear {
	JobBankSystem playsRole jobBankSystem;
	JobBankYear playsRole jobBankYear{
		multiplicity *;
	}
}

relation JobBankSystemWithOrganizationalModel {
	JobBankSystem playsRole jobBankSystem;
	.module.organization.domain.OrganizationalModel playsRole organizationalModel;
}
relation JobBankSystemBackOfficeAccountabilityType {
	JobBankSystem playsRole jobBankSystem;
	.pt.ist.bennu.core.domain.User playsRole managementUsers{
		multiplicity *;
	}
}

relation JobBankSystemWithEmailValidation {
	JobBankSystem playsRole jobBankSystem;
	EmailValidation playsRole emailValidations{
		multiplicity *;
	}
}

relation JobBankSystemStudentRegistrations {
	JobBankSystem playsRole jobBankSystem;
	StudentRegistration playsRole studentRegistration{
		multiplicity *;
	}
}

relation StudentRegistrationCycleTypeStudentRegistrations {
	StudentRegistration playsRole studentRegistration;
	StudentRegistrationCycleType playsRole studentRegistrationCycleTypes{
		multiplicity *;
	}
}

/* Relations */

relation EnterpriseWithUser{
	Enterprise playsRole enterprise; 
	.pt.ist.bennu.core.domain.User playsRole user;
}

relation EnterpriseWithUnit{
	Enterprise playsRole enterprise; 
	.module.organization.domain.Unit playsRole unit;
}

relation EnterpriseWithJobOffer{
	Enterprise playsRole enterprise;
	JobOffer playsRole jobOffer{
		multiplicity *;
	}
}
relation EnterpriseWithEnterpriseProcess{
	Enterprise playsRole enterprise;
	EnterpriseProcess playsRole enterpriseProcess;
}
relation EnterpriseWithAgreementTypeForApproval{
	Enterprise playsRole enterprise{
		multiplicity *;
	}
	.module.organization.domain.AccountabilityType playsRole agreementForApproval; 
}
relation StudentWithPerson{
	Student playsRole student;
	.module.organization.domain.Person playsRole person;
}

relation StudentWithJobOfferNotificationFilter{
	Student playsRole student;
	JobOfferNotificationFilter playsRole jobOfferNotificationFilter {
		multiplicity *;
	}
}

relation FenixDegreeWithJobOfferNotificationFilter {
	FenixDegree playsRole fenixDegree;
	JobOfferNotificationFilter playsRole jobOfferNotificationFilter {
		multiplicity *;
	}
}

relation JobOfferWithJobOfferProcess {
	JobOffer playsRole jobOffer;
	JobOfferProcess playsRole jobOfferProcess;
	
}
relation JobOfferWithJobOffer{
	JobOffer playsRole jobOffer;
	OfferCandidacy playsRole offerCandidacy{
		multiplicity *;
	}	
}
relation JobOfferWithRemoteDegree{
	JobOffer playsRole {
 		multiplicity *;
	}
	FenixDegree playsRole degree{
		multiplicity *;
	}	
}

relation JobOfferWithOfferCandidacySelectCandidacies{
	JobOffer playsRole jobOfferSelectCandidacy;
	OfferCandidacy playsRole selectCandidacies{
		multiplicity *;
	}	
}

relation JobBankYearWithJobOffer {
	JobBankYear playsRole jobBankYear;
	JobOffer playsRole jobOffer {
		multiplicity *;
	}
}

relation StudentWithCurriculum{
	Student playsRole student;
	Curriculum playsRole curriculum;
}

relation StudentCandidateToffers{
	Student playsRole student{
		multiplicity *;
	}
	JobOffer playsRole jobOffer{
		multiplicity *;
	}
}
relation StudentWithOfferCandidacy{
	Student playsRole student;
	OfferCandidacy playsRole offerCandidacy{
		multiplicity *;
	}	
}

relation CurriculumWithCurriculumProcess{
	Curriculum playsRole curriculum;
	CurriculumProcess playsRole curriculumProcess;
	
}

relation CurriculumWithCurriculumQualification{
	Curriculum playsRole curriculum;
	curriculumQualification.CurriculumQualification playsRole curriculumQualification{
		multiplicity *;
	}	
}

relation OfferCandadicyWithProcessFile{
	OfferCandidacy playsRole offerCandidacy{
		multiplicity *;
	}
	.module.workflow.domain.ProcessFile playsRole processFiles{
		multiplicity *;
	}
}

relation RegistrationDegree{
	FenixDegree playsRole fenixDegree;
	StudentRegistration playsRole studentRegistration {
		multiplicity *;
	}
}

relation StudentRegistrations{
	Student playsRole student;
	StudentRegistration playsRole studentRegistration{
		multiplicity *;
	}
}

/*
relation StudentRegistrationWithRemoteRegistration{
	StudentRegistration playsRole {
		multiplicity *;
	}
	.net.sourceforge.fenixedu.domain.student.RemoteRegistration playsRole remoteRegistration;
}
*/

/*
relation FenixDegreeWithRemoteDegree{
	FenixDegree playsRole ;
	.net.sourceforge.fenixedu.domain.RemoteDegree playsRole remoteDegree;
}
*/

